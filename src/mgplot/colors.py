"""
colors.py
This module provides a set of color palettes and functions to generate colors
for Australian states and territories and major political parties.
"""

# --- Imports
from typing import Iterable


# --- Functions
def get_party_palette(party_text: str) -> str:
    """
    Return a matplotlib color-map name based on party_text.
    Works for Australian major political parties.
    """

    # Note: light to dark maps work best
    if "alp" in party_text.lower():
        return "Reds"
    if "l/np" in party_text.lower():
        return "Blues"
    if "grn" in party_text.lower():
        return "Greens"
    if "oth" in party_text.lower():
        return "YlOrBr"
    if "onp" in party_text.lower():
        return "YlGnBu"
    return "Purples"


def get_color(s: str) -> str:
    """
    Return a matplotlib color for a party label
    or an Australian state/territory.
    """

    color_map = {
        # --- Australian states and territories
        ("wa", "western australia"): "gold",
        ("sa", "south australia"): "red",
        ("nt", "northern territory"): "#CC7722",  # ochre
        ("nsw", "new south wales"): "deepskyblue",
        ("act", "australian capital territory"): "blue",
        ("vic", "victoria"): "navy",
        ("tas", "tasmania"): "seagreen",  # bottle green #006A4E?
        ("qld", "queensland"): "#c32148",  # a lighter maroon
        ("australia", "aus"): "grey",
        # --- political parties
        ("dissatisfied",): "darkorange",  # must be before satisfied
        ("satisfied",): "mediumblue",
        (
            "lnp",
            "l/np",
            "coalition",
            "dutton",
            "ley",
        ): "royalblue",
        (
            "alp",
            "labor",
            "albanese",
        ): "indianred",
        (
            "grn",
            "green",
        ): "mediumseagreen",
        (
            "other",
            "oth",
        ): "darkorange",
    }

    for find_me, return_me in color_map.items():
        if any(x in s.lower() for x in find_me):
            return return_me

    return "darkgrey"


def colorise_list(party_list: Iterable) -> list[str]:
    """
    Return a list of party/state colors for a party_list.
    """

    return [get_color(x) for x in party_list]


def contrast(orig_color: str) -> str:
    """
    Provide a constrasting color to any party color
    generated by get_color() above.
    """

    new_color = "black"
    match orig_color:
        case "royalblue":
            new_color = "indianred"
        case "indianred":
            new_color = "mediumblue"

        case "darkorange":
            new_color = "mediumblue"
        case "mediumblue":
            new_color = "darkorange"

        case "mediumseagreen":
            new_color = "darkblue"

        case "darkgrey":
            new_color = "hotpink"

    return new_color


# --- Australian state names
_state_names = {
    "New South Wales": "NSW",
    "Victoria": "Vic",
    "Queensland": "Qld",
    "South Australia": "SA",
    "Western Australia": "WA",
    "Tasmania": "Tas",
    "Northern Territory": "NT",
    "Australian Capital Territory": "ACT",
}
state_names = {}
for k, v in _state_names.items():
    # allow for fast different case matches
    state_names[k] = v
    state_names[k.lower()] = v
    state_names[k.upper()] = v
    state_names[v.lower()] = v
    state_names[v.upper()] = v


def abbreviate_state(state: str) -> str:
    """
    Return the abbreviation for a state name.
    """

    return state_names.get(state.lower(), state)
